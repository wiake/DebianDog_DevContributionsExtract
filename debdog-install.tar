#!/bin/bash
#########	Partition a drive, make bootable, and install O.S.

#####	Terence Becker		SunBurnt		Mar. 31  2014
#####	William McEwan		mcewanw	restructured and mods added June 15 2015
#####		to handle SD card installation and to copy vmlinuz and initrd early.
#####	No warranty of any kind... Use at your own risk!

[ "`whoami`" != "root" ] && exec gsu ${0}
echo pwd=$PWD

if [ -z `which gtkdialog` ]; then
	msg="  Cannot continue without gtkdialog, please install it."
	xmessage "`echo -e $msg`"
exit 0
fi

# Functions # mcewanw

install_mbr() { # installs grub4dos wee but not grldr or menu.lst - mcewanw
rm -f /tmp/wee.mbr
cp -a /opt/bin/wee.mbr /tmp/wee.mbr
# Read disk signature and partition table from MBR_DEV
# and write it to wee.mbr:
dd if=$MBR_DEV bs=1 skip=439 count=72 2>/dev/null | \
	dd of=/tmp/wee.mbr bs=1 seek=439 conv=notrunc 2>/dev/null

# Back up the sectors about to be overwritten, just in case:
dd if=$MBR_DEV of=/root/$(basename $MBR_DEV).63s bs=512 count=63 2>/dev/null

# Write wee MBR to $MBR_DEV
dd if=/tmp/wee.mbr of=$MBR_DEV 2>/dev/null

cat <<EOF
Wee has been installed to '$MBR_DEV'

Note: Your old MBR was backed up to '/root/$(basename $MBR_DEV).63s'
If something went wrong, you can restore it with:
  cat /root/$(basename $MBR_DEV).63s > $MBR_DEV

EOF
	msg=" Bootloader has been Installed to $DRV.\n  Note: Your old MBR was backed up to '/root/$DRV.63s' \n  If something went wrong, you can restore it with: \n  cat /root/$DRV.63s > $MBR_DEV"
	Xdialog --title "DebianDog Installer" --msgbox "`echo -e $msg`" 0 0
}

create_menu_lst () { # mcewanw - needs $MNT and $UUID determined earlier
#DRV1=${DRV}1

#mkdir -p "/media/$DRV1" 2> /dev/null
#mount /dev/$DRV1 "/media/$DRV1"
#mount /dev/$PART "${MNT}"
UUID=`blkid -o value -s UUID /dev/$PART`
#cd "$MNT"
#VMLINUZ=`find . -name vmlinuz1 | sed 's/^.\(.*\)/\1/'`
#INITRD=`find . -name initrd1.img | sed 's/^.\(.*\)/\1/'`

# Generate menu.lst
if [ -f "${MNT}/menu.lst" ]; then
echo '
title DebianDog Wheezy live-boot-2 Persistent Changes
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live persistent config swapon quickreboot noprompt autologin
 initrd /live/initrd1.img

title DebianDog Wheezy live-boot-2 (no persistent)
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live config swapon quickreboot noprompt autologin
 initrd /live/initrd1.img
 
title DebianDog Wheezy live-boot-2 Copy to RAM
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live toram=01-filesystem.squashfs
 initrd /live/initrd1.img

title Debian-PorteusDog Wheezy changes to /live/
 uuid '"$UUID"'
 kernel /live/vmlinuz1 from=/ noauto changes=/live/
 initrd /live/initrd1.xz

title Debian-PorteusDog Wheezy changes to /live/
 uuid '"$UUID"'
 kernel /live/vmlinuz1 from=/ noauto changes=EXIT:/live/
 initrd /live/initrd1.xz

title Debian-PorteusDog Wheezy Always Fresh
 uuid '"$UUID"'
kernel /live/vmlinuz1 from=/ nomagic base_only norootcopy
initrd /live/initrd1.xz

title Debian-PorteusDog Wheezy Copy to RAM
 uuid '"$UUID"'
 kernel /live/vmlinuz1 noauto from=/ copy2ram
 initrd /live/initrd1.xz
 
 title DebianDog Wheezy live-boot-3 Persistence Changes
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live persistence config quickreboot noeject autologin
 initrd /live/initrd.img

title DebianDog Wheezy live-boot-3 (no persistence)
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live config quickreboot noeject autologin
 initrd /live/initrd.img
 
title DebianDog Wheezy live-boot-3 Copy to RAM
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live toram=01-filesystem.squashfs
 initrd /live/initrd.img

' >> "/${MNT}/menu.lst"
else
echo '
# menu.lst produced by grub4dosconfig-v1.7
color white/blue black/cyan white/black cyan/black
timeout 10
default 0

title DebianDog Wheezy live-boot-2 Persistent Changes
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live persistent config swapon quickreboot noprompt autologin
 initrd /live/initrd1.img

title DebianDog Wheezy live-boot-2 (no persistent)
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live config swapon quickreboot noprompt autologin
 initrd /live/initrd1.img
 
title DebianDog Wheezy live-boot-2 Copy to RAM
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live toram=01-filesystem.squashfs
 initrd /live/initrd1.img

title Debian-PorteusDog Wheezy changes to /live/
 uuid '"$UUID"'
 kernel /live/vmlinuz1 from=/ noauto changes=/live/
 initrd /live/initrd1.xz

title Debian-PorteusDog Wheezy changes to /live/
 uuid '"$UUID"'
 kernel /live/vmlinuz1 from=/ noauto changes=EXIT:/live/
 initrd /live/initrd1.xz

title Debian-PorteusDog Wheezy Always Fresh
 uuid '"$UUID"'
 kernel /live/vmlinuz1 from=/ nomagic base_only norootcopy
 initrd /live/initrd1.xz

title Debian-PorteusDog Wheezy Copy to RAM
 uuid '"$UUID"'
 kernel /live/vmlinuz1 noauto from=/ copy2ram
 initrd /live/initrd1.xz
 
title DebianDog Wheezy live-boot-3 Persistence Changes
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live persistence config quickreboot noeject autologin
 initrd /live/initrd.img

title DebianDog Wheezy live-boot-3 (no persistence)
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live config quickreboot noeject autologin
 initrd /live/initrd.img
 
title DebianDog Wheezy live-boot-3 Copy to RAM
 uuid '"$UUID"'
 kernel /live/vmlinuz1 boot=live toram=01-filesystem.squashfs
 initrd /live/initrd.img

title Reboot computer
  reboot

' > "${MNT}/menu.lst"
fi
}

install_grldr () { # mcewanw - needs $MNT determined earlier
 echo drv1=$DRV1
 cp -a /opt/bin/grldr "$MNT"
}

grub4dos_inst() { # mcewanw - this installs grub4dos and also grldr and menu.lst
echo drv=$DRV
MBR_DEV="/dev/$DRV"
RET1=$(export MAIN_DIALOG='
 <window title=" Grub4Dos Installer ">
 <vbox>
<text>
 <label>"DebianDog has been Installed to '$PART'"</label>

     </text>
  <text use-markup="true">
  <label>"  Install boot loader(Grub4Dos) on <b>'$DRV'</b> ?   "</label>
     </text>
      <text>
    <label>"  Also 'menu.lst' will be generated. "</label>
    </text>
      <text>
    <label>"If it exists already, the entries will just be added at the bottom."</label>
    </text>
      <text>
    <label>"  Press 'OK' to install. Press 'Cancel' if you do not like to.   "</label>
    </text>
  <hbox>
   <button cancel></button>
   <button ok></button>
  </hbox>
 </vbox>
 </window>
'

gtkdialog --program=MAIN_DIALOG)

eval "$RET1"
echo -e "\n$RET1"
echo
if [ "$EXIT" = 'OK' ]; then
 install_mbr
 create_menu_lst # mcewanw - the code was here but now in these functions
 install_grldr # mcewanw
else
 exit
fi
}

linux_fs () { # mcewanw - chooses between extlinux and grub4dos
tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15

Xdialog --title "DebianDog Installer" \
		--clear \
        --radiolist "Filesystem is '$CHKFS'. \nSelect the bootloader to use: \nGrub4dos will work in most cases.\nIf your BIOS doesn't support it, select extlinux then.         " 0 0 3  \
"grub4dos" "for ext2,3,4, vfat and ntfs filesystems" off \
"extlinux" "for ext2,3,4 filesystems" off  2> $tempfile
if grep -q 'extlinux' $tempfile; then 
choice=extlinux
echo $choice
else
choice=grub4dos
echo $choice
fi
}

vfat_fs () { # mcewanw - chooses between syslinux and grub4dos
tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
trap "rm -f $tempfile" 0 1 2 5 15

Xdialog --title "DebianDog Installer" \
		--clear \
        --radiolist "Filesystem is '$CHKFS'. \nSelect the bootloader to use: \nGrub4dos will work in most cases.\nIf your BIOS doesn't support it, select syslinux then.         " 0 0 3  \
"grub4dos" "for vfat, ext2,3,4 and ntfs filesystems" off \
"syslinux" "for vfat filesystems" off  2> $tempfile
if grep -q 'syslinux' $tempfile; then 
choice=syslinux
echo $choice
else
choice=grub4dos
echo $choice
fi
}

check_fs_bootloader () { # mcewanw - determines fs on the selected partition - needs $MNT determined earlier
CHKFS=`blkid -o value -s TYPE "/dev/$PART"`
CHKLINUX=`blkid -o value -s TYPE "/dev/$PART" | grep 'ext'`
if [ -n "$CHKLINUX" ]; then
linux_fs
fi
if [ "$CHKFS" = "vfat" ]; then
vfat_fs
fi
if [ "$CHKFS" = "ntfs" ]; then
grub4dos_inst
fi

retval=$?

case $retval in
  0)
case $choice in
  grub4dos)
grub4dos_inst
    echo "'$choice' is bootloader of choice"
;;
syslinux)  
    echo "'$choice' is bootloader of choice"
        cp -a /opt/apps/syslinux "$MNT"
    cd "$MNT"/syslinux
xterm -si -sb -fg black -bg white -geometry 75x16 -e ./syslinuxinst
;;
extlinux)
    echo "'$choice' is bootloader of choice"
    cp -a /opt/apps/syslinux "$MNT"
    cd "$MNT"/syslinux
xterm -si -sb -fg black -bg white -geometry 75x16 -e ./extlinuxinst
;;
esac
;;
  1)
    echo "Cancel pressed."
exit ;;
  255)
    echo "ESC pressed."
exit ;;
esac	
}

mbr_install_only () { # mcewanw - provides GUI menu only and calls install_mbr
echo drv=$DRV
MBR_DEV="/dev/$DRV"
RET1=$(export MAIN_DIALOG='
 <window title=" Grub4Dos Installer ">
 <vbox>
  <text use-markup="true">
  <label>"  The boot loader(Grub4Dos) will be installed on <b>'$DRV'</b>   "</label>
     </text>
      <text>
    <label>"  Press 'OK' to install. Press 'Cancel' if you do not like to.   "</label>
    </text>
  <hbox>
   <button cancel></button>
   <button ok></button>
  </hbox>
 </vbox>
 </window>
'

gtkdialog --program=MAIN_DIALOG)

 eval "$RET1"
echo -e "\n$RET1"
echo
if [ "$EXIT" = 'OK' ]; then
install_mbr
exec "$0"
else
exec "$0"
fi
}

check_install_selections () {
 if [ ! "$PF" ] && [ ! "$FILE_DIRECTORY" ]; then
  Xdialog --title "DebianDog Installer" --msgbox " No Linux O.S. Selected. \n                                                                            " 0 0 && exec "$0"
 fi
 if [ "$PF" ] && [ "$FILE_DIRECTORY" ]; then
  Xdialog --title "DebianDog Installer" --msgbox " You cannot select Iso and Directory both. \n                                                                            " 0 0 && exec "$0"
 fi
 [ "$part" ]&& PART="$part"
 echo check="$CHECKBOX"
 if [ "$CHECKBOX" = "true" ]; then
  echo check="$CHECKBOX"
  CHKFS=`blkid -o value -s TYPE "/dev/$PART"`
  echo chkfs=$CHKFS
  if [ "$CHKFS" = "ext4" ]; then
   NOTMNT=`blkid -o list "/dev/$PART" -c /dev/null | grep "(not mounted)"`
   if [ -z "$NOTMNT" ]; then
    umount "/dev/$PART"
   fi
   tune2fs -O ^has_journal "/dev/$PART"
   e2fsck -f -y "/dev/$PART"
  fi
 fi
}

set_bootflag () {
 [ "$part" ]&& PART="$part"
 # Set boot flag (needs to be removed first if it's present) Terry version - PARTNUM=`echo $PART | cut -c4`
 PARTNUM=$(echo "$PART" | grep -Eo "[[:digit:]]*$") # mcewanw change
 for n in /dev/${DRV}* ; do
  if [ "`fdisk -l /dev/$DRV | grep $n | awk '{ print $2 }'`" = "*" ]; then
   echo part=$n
   #PNUM=`echo $n | cut -c9` # Terry
   PNUM=$(echo "$n" | grep -Eo "[[:digit:]]*$") # mcewanw change
   echo pnum=$PNUM
   echo -e "a\n${PNUM}\nw" | fdisk /dev/${DRV}
  fi
 done
 echo -e "a\n${PARTNUM}\nw" | fdisk /dev/${DRV}
}

mount_install_part () {
 #partprobe /dev/${DRV}

 MNT=`mount |sed "/$PART/!d;s,^.* on ,,;s, .*$,,"`

 if [ ! "$MNT" ]			# mount install part.
 then
  MNT="/media/$PART"
  echo mnt="$MNT"

  #echo '###  MNT' -t "$FS" "/dev/$PART" "$MNT" ;exit
  #		umount "/dev/$PART" 2> /dev/null
  mkdir -p "$MNT"
  mount -t "$FS" "/dev/$PART" "$MNT"
  [ "$?" -gt 0 ]&& Xdialog --title "DebianDog Installer" --msgbox " Partition Mount Failed \n The reason for this can be: You selected a 'raw' drive e.g. '"'sdb'"' \n  Please try again and select a numbered partition e.g. '"'sdb1'"' " 0 0 && exec "$0"
 fi

 mkdir -p "/media/$PART"
}

install_from_iso () {
  umount -d /media/iso 2> /dev/null
  mkdir -p /media/iso "$MNT"
  sleep 2
  mount -t iso9660 -o loop "$PF" /media/iso
  [ "$?" -gt 0 ]&& Xdialog --title "DebianDog Installer" --msgbox " ISO File Mount Failed. \n                                                                            " 0 0 && exec "$0"

  DIRCHK="`ls "$MNT/live" 2> /dev/null`"

  if [ -n "$DIRCHK" ]; then
   Xdialog --title "DebianDog Installer" --yesno " Warning: Directory '"$MNT/live"' already exists. \n The content will be removed first. \n Click 'No' for not removing it. \n Then you need to rename it first before installing DebianDog. \n Continue? " 0 0
   ret=$?
   if [[ $ret -ne 0 ]]; then
    umount /media/iso
    exec "$0"
   else
    if [ -n "${MNT+xxx}" ]; then
     rm -rf "$MNT/live"
    fi
   fi
  fi

  echo   Copy /media/iso/live "$MNT"
  mkdir "$MNT/live" 2> /dev/null

  running(){ ps $1 | grep $1 >/dev/null; }

  TOTAL=$(du -cbs --apparent-size "$FILE_DIRECTORY"/* | awk 'END {print $1}')

  #cp -a "$FILE_DIRECTORY"/* "$MNT/live" &  # mcewanw change reordering below
  (cp -a "$FILE_DIRECTORY"/vmlinu* "$MNT/live"
   cp -a "$FILE_DIRECTORY"/initrd* "$MNT/live"
   for REMAINING in $(ls "$FILE_DIRECTORY"|sed 's/vmlinu.*//;s/initrd.*//')
   do
    cp -a "$FILE_DIRECTORY"/${REMAINING} "$MNT/live"
   done) &

  CPPID=$!

  trap "kill $CPPID" 2 15

  (
   while running $CPPID; do
    COPY=$(du -cbs --apparent-size "$MNT/live" 2> /dev/null | awk 'END {print $1}')
    PERC=$((COPY*100/TOTAL))
    echo $PERC
   done       
   
   echo 100
   sleep 2  
  ) | Xdialog --title "DebianDog Installer" --gauge " Copying files to "$MNT"... " 7 70 0

  ret=$?

  if [ "$ret" -gt 0 ]; then
   Xdialog --title "DebianDog Installer" --msgbox " File Copy Failed \n
                                                                           " 0 0
   sleep 3 
   umount -d /media/iso
   exec "$0"
  fi
  sleep 3
  rm -rf "$MNT"/lost+found
  umount -d /media/iso
}

install_from_directory () {
  VMLINUZ="`ls "${FILE_DIRECTORY}"/vmlinuz* 2> /dev/null`"

  if [ ! "$VMLINUZ" ]; then
   Xdialog --title "DebianDog Installer" --msgbox " No vmlinuz file found. \n Please choose a directory containing a vmlinuz file. " 0 0 && exec "$0"
  fi

  DIRCHK="`ls "$MNT/live" 2> /dev/null`"

  if [ -n "$DIRCHK" ]; then
   Xdialog --title "DebianDog Installer" --yesno " Warning: Directory '"$MNT/live"' already exists. \n The content will be removed first. \n Click 'No' for not removing it. \n Then you need to rename it first before installing DebianDog. \n Continue? " 0 0
   ret=$?
   if [[ $ret -ne 0 ]]; then
    exec "$0"
   else
    if [ -n "${MNT+xxx}" ]; then
     rm -rf "$MNT/live"/*
    fi
   fi
  fi

  echo   Copy "${FILE_DIRECTORY}"/* "$MNT/live"
  mkdir "$MNT/live"

  running(){ ps $1 | grep $1 >/dev/null; }

  TOTAL=$(du -cbs --apparent-size "$FILE_DIRECTORY"/* | awk 'END {print $1}')
 
  #cp -a "$FILE_DIRECTORY"/* "$MNT/live" &  # mcewanw change reordering below
  (cp -a "$FILE_DIRECTORY"/vmlinu* "$MNT/live"
   cp -a "$FILE_DIRECTORY"/initrd* "$MNT/live"
   for REMAINING in $(ls "$FILE_DIRECTORY"|sed 's/vmlinu.*//;s/initrd.*//')
   do
    cp -a "$FILE_DIRECTORY"/${REMAINING} "$MNT/live"
   done) &

  CPPID=$!

  trap "kill $CPPID" 2 15

  (
   while running $CPPID; do
    COPY=$(du -cbs --apparent-size "$MNT/live"/* 2> /dev/null | awk 'END {print $1}')
       
    PERC=$((COPY*100/TOTAL))
    echo $PERC
   done
  
   echo 100
   sleep 2     
  ) | Xdialog --title "DebianDog Installer" --gauge " Copying files to "$MNT/live"... " 7 70 0

  ret=$?

  if [ "$ret" -gt 0 ]; then
   Xdialog --title "DebianDog Installer" --msgbox " File Copy Failed \n                                                                            " 0 0
   exec "$0"
  fi
  rm -rf "$MNT"/lost+found
}

install_linux_files () { # mcewanw
 check_install_selections
 set_bootflag # mcewanw - function checks all partitions and toggles boot flag on
 mount_install_part # mcewanw - also needed (anywhere) before any call to function check_fs_bootloader I think since determines value for $MNT

 if [ "${PF##*.}" = 'iso' ]			## iso file
 then
  install_from_iso # mcewanw - if iso source selected
 else												## o.s. files
  install_from_directory
 fi
 # was the grub4dos function definition # mcewanw
 # was the linux_fs function definition # mcewanw
 # was the vfat_fs function definition # mcewanw

 check_fs_bootloader # mcewanw - determines fs on the selected partition and installs mbr and bootloader files
}

# Main program code following top initialisation code starts here # mcewanw

ImgSz="2G"		###  Set "full" size of Live image file.

INFO=$(drive-info |tail -n +4)
i=a
#echo -e "\n$INFO\n"

ITEMs=$(echo "$INFO" |while read L
do
	P=`echo "$L" |cut -d, -f1`
	T=`echo "$L" |cut -d, -f2`
	F=`echo "$L" |cut -d, -f3`
	B=`echo "$L" |cut -d, -f4`
	S=`echo "$L" |cut -d, -f5`
	Lb="`blkid -c /dev/null -o value -s LABEL /dev/$P`"
	[ "$F" = 'fix' ]&& F=fixed || F=USB
#	[ "$B" ]|| B=No
	[ "$i" != ${P:2:1} ]&& i=${P:2:1} &&
		echo "<item>||||</item>"
	echo "<item>$P|$T|$F|$B|$Lb|$S</item>"
done)
#echo "$ITEMs" ;echo #;exit

RET=$(export PART_DIALOG='
<window title=" DebianDog Installer">
<vbox>
  <text width-request="600"><label>For installing DebianDog only (frugal install).</label></text>
  <text width-request="600"><label>Select Drive below, Select Iso or Directory and click '"'Install'"'.</label></text>
  <text width-request="600"><label>Then there will be choice which bootloader to install.</label></text>
<text width-request="600"><label>Depending on the filesytem type the options are: grub4dos, syslinux or extlinux.</label></text>
  <text width-request="600"><label>"For only install MBR (grub4dos) to selected drive click '"'Install MBR'"'"</label></text>

<hbox>
  <table>
    <width>420</width><height>250</height>
    <variable>PART</variable>
    <label>"Part.     |FSys     |Type     |Flag     |Label             |Size            "</label>
	'$ITEMs'
  </table>

<vbox>
  <frame   Select DebianDog Iso: >

<button>

    <label>" .iso File "</label>
    <input file stock="gtk-open"></input>                            
    <variable>FILE_BROWSE_FILENAME</variable>
    <action type="fileselect">PF</action>

</button>
<entry width-request="250"> 
		<variable>PF</variable>
	<label>Select a .iso file</label>
        <action>disable:FILE_BROWSE_DIRECTORY</action>      
        <action>disable:FILE_DIRECTORY</action>

</entry>

 </frame> 

  <frame  Or Select Directory: >
      <button>
    <label>" DebianDog Folder  "</label>
        <input file stock="gtk-open"></input>
        <variable>FILE_BROWSE_DIRECTORY</variable>
        <action type="fileselect">FILE_DIRECTORY</action>
      </button>
      <entry accept="directory">
        <label>Select a Directory containing DebianDog Files</label>
        <variable>FILE_DIRECTORY</variable>
        <action>disable:FILE_BROWSE_FILENAME</action>      
        <action>disable:PF</action>

	  </entry>
	     <button>
      <label>" Reset "</label>
<input file stock="gtk-refresh"></input>
  <action>clear:FILE_DIRECTORY</action>
    <action>clear:PF</action>     
 <action>enable:FILE_BROWSE_DIRECTORY</action>
  <action>enable:FILE_DIRECTORY</action>
<action>enable:PF</action> 
<action>enable:FILE_BROWSE_FILENAME</action>

   </button>
 </frame>

<button height-request="40">
<label>" Install "</label>
<input file stock="gtk-yes"></input>
    <action>EXIT:INST</action>
  </button>

  <button>
    <label>" Install MBR "</label>
<input file stock="gtk-harddisk"></input>
    <action>EXIT:INST1</action>
  </button>

  <button cancel></button>


</vbox>
</hbox>

  <frame>
	<checkbox>
<label>"  Disable journal on ext4 filesystem (recommended for flash drives)"</label>
<default>true</default>
<variable>CHECKBOX</variable>
<action>echo Checkbox is $CHECKBOX now.</action>
<action>if true enable:ENTRY</action>
<action>if false disable:ENTRY</action>
</checkbox>
  <text><label>To Partition and Format selected Drive, click '"'Run gparted'"'</label></text>
  <hbox>


    <button>
      <input file icon="gparted"></input>
      <label> Run gparted </label>
      <action>EXIT:1PART</action>
    </button>
  </hbox>
  </frame>
</vbox>
</window>
'
gtkdialog --program=PART_DIALOG)

eval "$RET"
echo -e "\n$RET"
echo
[ "$EXIT" = 'Cancel' ]&& exit
[ "$EXIT" = 'abort' ]&& exit
#msg="\n###  No Partition Selected.\n"
[ ! "$PART" ]&& Xdialog --title "DebianDog Installer" --msgbox " No Partition Selected. \n                                                                            " 0 0 && exec "$0"

L=`echo "$INFO" |grep "$PART"`
FS=`echo "$L" |cut -d, -f2`
F_R=`echo "$L" |cut -d, -f3`
BOOT=`echo "$L" |cut -d, -f4`
SIZE=`echo "$L" |cut -d, -f5`

#PI=`parted -l |sed "/${PART:0:3}:/!d;s,^.* ,,"`			# get parted info.
#nB="${PI: -2}"
#SZ="${PI:0:$((${#a}-2))}"
#DRV="${PART:0:3}" # Terry version
# mcewanw change version follows
if [ ${#PART} -lt 6 ];then
 DRV="${PART:0:3}"
else
 DRV="${PART:0:7}"
fi

echo part=$PART

if [ "$EXIT" = 'INST' ]		### install Linux files
then
 install_linux_files # the actual code used to be here - mcewanw
fi

if [ "$EXIT" = 'INST1' ]; then
 # mbr_install_only # this was original debdog-installer method - mcewanw change
 # but I wanted choice of bootloader plus install of, for example, grldr and menu.lst, hence calling functions:
 set_bootflag
 mount_install_part
 check_fs_bootloader
fi

case "$EXIT" in
	'1PART')
	echo fs=$FS
	gparted /dev/"$DRV"
		exec "$0"
		;;
esac

echo
exit
